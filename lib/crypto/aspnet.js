var crypto = require('crypto'),
    externals = {},
    internals = {},
    Q = require('q');


/**
 * Given a authentication pair and ASP.NET hash, returns comparison check
 *
 * @param  {String} password
 * @param  {String} salt
 * @param  {String} hash
 *
 * @return {Promise}
 */
externals.authenticate = function(password, salt, hash) {
  var deferred = Q.defer();

  externals.generate(password, salt).done(function(result) {
    deferred.resolve(result === hash);
  }, deferred.reject);

  return deferred.promise;
};


/**
 * Helper method to generate password hashes that are the same
 * as those generated by the ASP.NET Memberships functionality
 *
 * @param  {String} password
 * @param  {String} salt
 *
 * @return {Promise}
 */
externals.generate = function(password, salt) {
  var bytes,
      deferred = Q.defer(),
      dst,
      src;

  if (!password) {
    deferred.reject(new Error('Password required'));
  } else if (!salt) {
    deferred.reject(new Error('Pre-generated salt required'));
  } else {
    bytes = new Buffer(password || '', 'ucs2');
    src = new Buffer(salt || '', 'base64');
    dst = new Buffer(src.length + bytes.length);

    src.copy(dst, 0, 0, src.length);
    bytes.copy(dst, src.length, 0, bytes.length);

    deferred.resolve(crypto.createHash('sha1').update(dst).digest('base64'));
  }

  return deferred.promise;
};


externals._internals = internals;
module.exports = externals;
